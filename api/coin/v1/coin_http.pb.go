// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.5

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type CoinHTTPServer interface {
	ConsumeCoin(context.Context, *ConsumeCoinRequest) (*ConsumeCoinReply, error)
	GetCoinBalance(context.Context, *GetCoinBalanceRequest) (*GetCoinBalanceReply, error)
	Recharge(context.Context, *RechargeCoinRequest) (*RechargeCoinReply, error)
}

func RegisterCoinHTTPServer(s *http.Server, srv CoinHTTPServer) {
	r := s.Route("/")
	r.POST("/coin/recharge", _Coin_Recharge0_HTTP_Handler(srv))
	r.POST("/coin/consume", _Coin_ConsumeCoin0_HTTP_Handler(srv))
	r.GET("/coin/balance/{user_id}", _Coin_GetCoinBalance0_HTTP_Handler(srv))
}

func _Coin_Recharge0_HTTP_Handler(srv CoinHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RechargeCoinRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.coin.v1.Coin/Recharge")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Recharge(ctx, req.(*RechargeCoinRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RechargeCoinReply)
		return ctx.Result(200, reply)
	}
}

func _Coin_ConsumeCoin0_HTTP_Handler(srv CoinHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ConsumeCoinRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.coin.v1.Coin/ConsumeCoin")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ConsumeCoin(ctx, req.(*ConsumeCoinRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ConsumeCoinReply)
		return ctx.Result(200, reply)
	}
}

func _Coin_GetCoinBalance0_HTTP_Handler(srv CoinHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCoinBalanceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.coin.v1.Coin/GetCoinBalance")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCoinBalance(ctx, req.(*GetCoinBalanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCoinBalanceReply)
		return ctx.Result(200, reply)
	}
}

type CoinHTTPClient interface {
	ConsumeCoin(ctx context.Context, req *ConsumeCoinRequest, opts ...http.CallOption) (rsp *ConsumeCoinReply, err error)
	GetCoinBalance(ctx context.Context, req *GetCoinBalanceRequest, opts ...http.CallOption) (rsp *GetCoinBalanceReply, err error)
	Recharge(ctx context.Context, req *RechargeCoinRequest, opts ...http.CallOption) (rsp *RechargeCoinReply, err error)
}

type CoinHTTPClientImpl struct {
	cc *http.Client
}

func NewCoinHTTPClient(client *http.Client) CoinHTTPClient {
	return &CoinHTTPClientImpl{client}
}

func (c *CoinHTTPClientImpl) ConsumeCoin(ctx context.Context, in *ConsumeCoinRequest, opts ...http.CallOption) (*ConsumeCoinReply, error) {
	var out ConsumeCoinReply
	pattern := "/coin/consume"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.coin.v1.Coin/ConsumeCoin"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CoinHTTPClientImpl) GetCoinBalance(ctx context.Context, in *GetCoinBalanceRequest, opts ...http.CallOption) (*GetCoinBalanceReply, error) {
	var out GetCoinBalanceReply
	pattern := "/coin/balance/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.coin.v1.Coin/GetCoinBalance"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CoinHTTPClientImpl) Recharge(ctx context.Context, in *RechargeCoinRequest, opts ...http.CallOption) (*RechargeCoinReply, error) {
	var out RechargeCoinReply
	pattern := "/coin/recharge"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.coin.v1.Coin/Recharge"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/gift/v1/gift.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GiveGiftRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GiveGiftRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetSenderId() < 1 {
		return GiveGiftRequestValidationError{
			field:  "SenderId",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetReceiverId() < 1 {
		return GiveGiftRequestValidationError{
			field:  "ReceiverId",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetGiftId() < 1 {
		return GiveGiftRequestValidationError{
			field:  "GiftId",
			reason: "value must be greater than or equal to 1",
		}
	}

	if m.GetNum() < 1 {
		return GiveGiftRequestValidationError{
			field:  "Num",
			reason: "value must be greater than or equal to 1",
		}
	}

	return nil
}

// GiveGiftRequestValidationError is the validation error returned by
// GiveGiftRequest.Validate if the designated constraints aren't met.
type GiveGiftRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GiveGiftRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GiveGiftRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GiveGiftRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GiveGiftRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GiveGiftRequestValidationError) ErrorName() string { return "GiveGiftRequestValidationError" }

// Error satisfies the builtin error interface
func (e GiveGiftRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGiveGiftRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GiveGiftRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GiveGiftRequestValidationError{}

// Validate checks the field values on GiveGiftReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GiveGiftReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ErrCode

	return nil
}

// GiveGiftReplyValidationError is the validation error returned by
// GiveGiftReply.Validate if the designated constraints aren't met.
type GiveGiftReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GiveGiftReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GiveGiftReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GiveGiftReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GiveGiftReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GiveGiftReplyValidationError) ErrorName() string { return "GiveGiftReplyValidationError" }

// Error satisfies the builtin error interface
func (e GiveGiftReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGiveGiftReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GiveGiftReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GiveGiftReplyValidationError{}

// Validate checks the field values on GiftHistory with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GiftHistory) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GiftId

	// no validation rules for GiftName

	// no validation rules for GiftValue

	// no validation rules for SenderId

	// no validation rules for ReceiverId

	// no validation rules for SenderNickname

	// no validation rules for ReceiverNickname

	// no validation rules for SendTime

	// no validation rules for Num

	return nil
}

// GiftHistoryValidationError is the validation error returned by
// GiftHistory.Validate if the designated constraints aren't met.
type GiftHistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GiftHistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GiftHistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GiftHistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GiftHistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GiftHistoryValidationError) ErrorName() string { return "GiftHistoryValidationError" }

// Error satisfies the builtin error interface
func (e GiftHistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGiftHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GiftHistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GiftHistoryValidationError{}

// Validate checks the field values on GetSendingHistoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSendingHistoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// GetSendingHistoryRequestValidationError is the validation error returned by
// GetSendingHistoryRequest.Validate if the designated constraints aren't met.
type GetSendingHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSendingHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSendingHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSendingHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSendingHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSendingHistoryRequestValidationError) ErrorName() string {
	return "GetSendingHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSendingHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSendingHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSendingHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSendingHistoryRequestValidationError{}

// Validate checks the field values on GetSendingHistoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSendingHistoryReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ErrCode

	for idx, item := range m.GetHistory() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSendingHistoryReplyValidationError{
					field:  fmt.Sprintf("History[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetSendingHistoryReplyValidationError is the validation error returned by
// GetSendingHistoryReply.Validate if the designated constraints aren't met.
type GetSendingHistoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSendingHistoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSendingHistoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSendingHistoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSendingHistoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSendingHistoryReplyValidationError) ErrorName() string {
	return "GetSendingHistoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSendingHistoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSendingHistoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSendingHistoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSendingHistoryReplyValidationError{}

// Validate checks the field values on GetReceivingHistoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetReceivingHistoryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// GetReceivingHistoryRequestValidationError is the validation error returned
// by GetReceivingHistoryRequest.Validate if the designated constraints aren't met.
type GetReceivingHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceivingHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceivingHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceivingHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceivingHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceivingHistoryRequestValidationError) ErrorName() string {
	return "GetReceivingHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceivingHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceivingHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceivingHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceivingHistoryRequestValidationError{}

// Validate checks the field values on GetReceivingHistoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetReceivingHistoryReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ErrCode

	for idx, item := range m.GetHistory() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReceivingHistoryReplyValidationError{
					field:  fmt.Sprintf("History[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetReceivingHistoryReplyValidationError is the validation error returned by
// GetReceivingHistoryReply.Validate if the designated constraints aren't met.
type GetReceivingHistoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReceivingHistoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReceivingHistoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReceivingHistoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReceivingHistoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReceivingHistoryReplyValidationError) ErrorName() string {
	return "GetReceivingHistoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetReceivingHistoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReceivingHistoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReceivingHistoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReceivingHistoryReplyValidationError{}

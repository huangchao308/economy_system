// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GiftClient is the client API for Gift service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GiftClient interface {
	GiveGift(ctx context.Context, in *GiveGiftRequest, opts ...grpc.CallOption) (*GiveGiftReply, error)
	GetSendingHistory(ctx context.Context, in *GetSendingHistoryRequest, opts ...grpc.CallOption) (*GetSendingHistoryReply, error)
	GetReceivingHistory(ctx context.Context, in *GetReceivingHistoryRequest, opts ...grpc.CallOption) (*GetReceivingHistoryReply, error)
}

type giftClient struct {
	cc grpc.ClientConnInterface
}

func NewGiftClient(cc grpc.ClientConnInterface) GiftClient {
	return &giftClient{cc}
}

func (c *giftClient) GiveGift(ctx context.Context, in *GiveGiftRequest, opts ...grpc.CallOption) (*GiveGiftReply, error) {
	out := new(GiveGiftReply)
	err := c.cc.Invoke(ctx, "/api.gift.v1.Gift/GiveGift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftClient) GetSendingHistory(ctx context.Context, in *GetSendingHistoryRequest, opts ...grpc.CallOption) (*GetSendingHistoryReply, error) {
	out := new(GetSendingHistoryReply)
	err := c.cc.Invoke(ctx, "/api.gift.v1.Gift/GetSendingHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftClient) GetReceivingHistory(ctx context.Context, in *GetReceivingHistoryRequest, opts ...grpc.CallOption) (*GetReceivingHistoryReply, error) {
	out := new(GetReceivingHistoryReply)
	err := c.cc.Invoke(ctx, "/api.gift.v1.Gift/GetReceivingHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GiftServer is the server API for Gift service.
// All implementations must embed UnimplementedGiftServer
// for forward compatibility
type GiftServer interface {
	GiveGift(context.Context, *GiveGiftRequest) (*GiveGiftReply, error)
	GetSendingHistory(context.Context, *GetSendingHistoryRequest) (*GetSendingHistoryReply, error)
	GetReceivingHistory(context.Context, *GetReceivingHistoryRequest) (*GetReceivingHistoryReply, error)
	mustEmbedUnimplementedGiftServer()
}

// UnimplementedGiftServer must be embedded to have forward compatible implementations.
type UnimplementedGiftServer struct {
}

func (UnimplementedGiftServer) GiveGift(context.Context, *GiveGiftRequest) (*GiveGiftReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveGift not implemented")
}
func (UnimplementedGiftServer) GetSendingHistory(context.Context, *GetSendingHistoryRequest) (*GetSendingHistoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSendingHistory not implemented")
}
func (UnimplementedGiftServer) GetReceivingHistory(context.Context, *GetReceivingHistoryRequest) (*GetReceivingHistoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivingHistory not implemented")
}
func (UnimplementedGiftServer) mustEmbedUnimplementedGiftServer() {}

// UnsafeGiftServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GiftServer will
// result in compilation errors.
type UnsafeGiftServer interface {
	mustEmbedUnimplementedGiftServer()
}

func RegisterGiftServer(s grpc.ServiceRegistrar, srv GiftServer) {
	s.RegisterService(&Gift_ServiceDesc, srv)
}

func _Gift_GiveGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiveGiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftServer).GiveGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gift.v1.Gift/GiveGift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftServer).GiveGift(ctx, req.(*GiveGiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gift_GetSendingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSendingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftServer).GetSendingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gift.v1.Gift/GetSendingHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftServer).GetSendingHistory(ctx, req.(*GetSendingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gift_GetReceivingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceivingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftServer).GetReceivingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.gift.v1.Gift/GetReceivingHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftServer).GetReceivingHistory(ctx, req.(*GetReceivingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gift_ServiceDesc is the grpc.ServiceDesc for Gift service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gift_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.gift.v1.Gift",
	HandlerType: (*GiftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GiveGift",
			Handler:    _Gift_GiveGift_Handler,
		},
		{
			MethodName: "GetSendingHistory",
			Handler:    _Gift_GetSendingHistory_Handler,
		},
		{
			MethodName: "GetReceivingHistory",
			Handler:    _Gift_GetReceivingHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gift/v1/gift.proto",
}
